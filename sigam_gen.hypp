#:def sigam (gp, openmp)
#:if gp
#:set bnds = [["1","KLON","1"],["KLEV","1","-1"]]
#:set dims = ["KLON", "KLEV"]
#:set inds = ["JLON", "JLEV"]
#:set dimp = "KLON"
#:set indp = "JLON"
#:set suff = "_GP"
#:else
#:set bnds = [["KLEV","1","-1"],["1","KSPEC","1"]]
#:set dims = ["KLEV", "KSPEC"]
#:set inds = ["JLEV", "JSPEC"]
#:set suff = "_SP"
#:set dimp = "KSPEC"
#:set indp = "JSPEC"
#:endif
#:if openmp
#:set suff = suff + "_OPENMP"
#:endif
SUBROUTINE SIGAM${suff}$ (YDGEOMETRY, YDCST, YDDYN, ${dims[0]}$, ${dims[1]}$, PD, PT, PSP)

!**** *SIGAM${suff}$* - Solve hydrostatic operator in semi-implicit

!     Purpose.
!     --------
!           Operator gamma to compute p.

!**   Interface.
!     ----------
!        *CALL* *SIGAM${suff}$(...)

!        Explicit arguments :
!        --------------------
!        KLEV   : DISTANCE IN MEMORY BETWEEN VALUES OF THE DIVERGENCE
!                OR TEMPERATURE AT THE VERTICAL
!        KLON   : DISTANCE IN MEMORY BETWEEN VALUES OF THE DIVERGENCE
!                OR TEMPERATURE AT THE SAME LEVEL

!           TYPICAL VALUES ARE  NDLSUR,1  FOR GRID POINT ARRAY
!                               1,NFLSUR  FOR SPECTRAL ARRAY

!        PD    : DIVERGENCE       (output)
!        PT    : TEMPERATURE      (input)
!        PSP   : SURFACE PRESSURE (input)
!        KNLON : NUMBER OF VERTICAL COLUMNS TREATED
!        KFLEVG: NUMBER OF ELEMENTS IN A VERTICAL COLUMN

!        Implicit arguments :
!        --------------------

!     Method.
!     -------
!        See documentation

!     Externals.
!     ----------

!     Reference.
!     ----------
!        ECMWF Research Department documentation of the IFS

!     Author.
!     -------
!      Mats Hamrud and Philippe Courtier  *ECMWF*
!      Original : 87-10-15

!     Modifications.
!     --------------
!      Modified : 09-Oct-2007 by K. YESSAD: possibility to have a specific
!                 value of LVERTFE in the SI linear model.
!      F. Vana + NEC 28-Apr-2009: OpenMP
!      P. Smolikova and J. Vivoda (Oct 2013): new options for VFE-NH
!      G. Mozdzynski Oct 2012: OpenMP optimization
!      K. Yessad (Dec 2016): Prune obsolete options.
!      J. Vivoda and P. Smolikova (Sep 2017): new options for VFE-NH
!      R.Brozkova + NEC 03-Mar-2021: Optimization for vector (NEC)
!     ------------------------------------------------------------------

USE GEOMETRY_MOD , ONLY : GEOMETRY
USE PARKIND1     , ONLY : JPIM, JPRB
USE YOMHOOK      , ONLY : LHOOK, DR_HOOK, JPHOOK
USE YOMCST       , ONLY : TCST
USE YOMDYN       , ONLY : TDYN


!     ------------------------------------------------------------------

IMPLICIT NONE

TYPE(GEOMETRY)    ,INTENT(IN)    :: YDGEOMETRY
TYPE(TCST)        ,INTENT(IN)    :: YDCST
TYPE(TDYN)        ,INTENT(IN)    :: YDDYN
INTEGER(KIND=JPIM),INTENT(IN)    :: KLEV 
INTEGER(KIND=JPIM),INTENT(IN)    :: ${dimp}$
REAL(KIND=JPRB)   ,INTENT(OUT)   :: PD(${dims[0]}$,${dims[1]}$)
REAL(KIND=JPRB)   ,INTENT(IN)    :: PT(${dims[0]}$,${dims[1]}$)
REAL(KIND=JPRB)   ,INTENT(IN)    :: PSP(${dimp}$)

!     ------------------------------------------------------------------

REAL(KIND=JPRB) :: ZSPHI(${dimp}$,0:KLEV+1)
REAL(KIND=JPRB) :: ZOUT(${dimp}$,0:KLEV)

#:def zsphix (i, j)
#:if gp
#:set z = "ZSPHIX(" + i + ", " + j + ")"
#:else
#:set z = "ZSPHIX(" + j + ", " + i + ")"
#:endif
$:z
#:enddef

#:set z = zsphix (dimp, "0:KLEV")
REAL(KIND=JPRB) :: ${z}$
INTEGER(KIND=JPIM) :: JLEV, ${indp}$
CHARACTER(LEN=4):: CLOPER
REAL(KIND=JPRB) :: ZDETAH
REAL(KIND=JPHOOK) :: ZHOOK_HANDLE

!     ------------------------------------------------------------------

#include "verdisint.intfb.h"

!     ------------------------------------------------------------------

IF (LHOOK) CALL DR_HOOK('SIGAM${suff}$',0,ZHOOK_HANDLE)

ASSOCIATE(YDVETA=>YDGEOMETRY%YRVETA,YDVFE=>YDGEOMETRY%YRVFE, YDCVER=>YDGEOMETRY%YRCVER)
ASSOCIATE(SIALPH=>YDDYN%SIALPH, SILNPR=>YDDYN%SILNPR, SIRPRG=>YDDYN%SIRPRG)
!     ------------------------------------------------------------------

!*       1.    SUM GEOPOTENTIAL, COMPUTES P AND PUT IT IN PD.
!              ----------------------------------------------

CLOPER='IBOT'

IF (YDCVER%LVERTFE) THEN

  IF (YDCVER%LVFE_COMPATIBLE) CLOPER='INTG'

#:if openmp
!$OMP PARALLEL PRIVATE(JLEV,${indp}$,ZDETAH)
!$OMP DO SCHEDULE(STATIC) 
#:endif
  DO JLEV=1,KLEV
    ZDETAH=YDVETA%VFE_RDETAH(JLEV)
    DO ${indp}$=1,${dimp}$
      ZSPHI(${indp}$,JLEV)=-YDCST%RD*PT(${inds[0]}$,${inds[1]}$)*SILNPR(JLEV)*ZDETAH
    ENDDO
  ENDDO
#:if openmp
!$OMP END DO
!$OMP END PARALLEL
#:endif

  ZSPHI(:,0)=0.0_JPRB
  ZSPHI(:,KLEV+1)=0.0_JPRB
  CALL VERDISINT(YDVFE,YDCVER,CLOPER,'11',${dimp}$,1,${dimp}$,KLEV,ZSPHI,ZOUT,KCHUNK=YDGEOMETRY%YRDIM%NPROMA)

#:if openmp
!$OMP PARALLEL PRIVATE(JLEV,${indp}$)
!$OMP DO SCHEDULE(STATIC) 
#:endif
  DO JLEV=1,KLEV
    DO ${indp}$=1,${dimp}$
      PD(${inds[0]}$,${inds[1]}$)=ZOUT(${indp}$,JLEV-1)+PSP(${indp}$)*SIRPRG
    ENDDO
  ENDDO
#:if openmp
!$OMP END DO
!$OMP END PARALLEL
#:endif

ELSE

#:set z = zsphix (":", "KLEV")
  ${z}$=0.0_JPRB

#:if openmp
!$OMP PARALLEL PRIVATE(${indp}$,JLEV)
!$OMP DO SCHEDULE(STATIC)
#:endif
  DO ${inds[1]}$=${bnds[1][0]}$,${bnds[1][1]}$,${bnds[1][2]}$
    DO ${inds[0]}$=${bnds[0][0]}$,${bnds[0][1]}$,${bnds[0][2]}$
#:set z0 = zsphix (indp, "JLEV")
#:set z1 = zsphix (indp, "JLEV-1")
      ${z1}$=${z0}$+YDCST%RD*PT(${inds[0]}$,${inds[1]}$)*SILNPR(JLEV)
      PD(${inds[0]}$,${inds[1]}$)=${z0}$+SIALPH(JLEV)*YDCST%RD*PT(${inds[0]}$,${inds[1]}$)+PSP(${indp}$)*SIRPRG
    ENDDO
  ENDDO
#:if openmp
!$OMP END DO
!$OMP END PARALLEL
#:endif

ENDIF

!      -----------------------------------------------------------------

END ASSOCIATE
END ASSOCIATE

IF (LHOOK) CALL DR_HOOK('SIGAM${suff}$',1,ZHOOK_HANDLE)

END SUBROUTINE SIGAM${suff}$
#:enddef

